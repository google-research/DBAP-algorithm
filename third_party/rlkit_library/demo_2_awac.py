# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""" Demo formatter.
Converts demonstration vectors generated by oculus_capture_hardware.py
to a format that works with AWAC.

AWAC format simply uses a list of timesteps, where each timestep is a
dictionary. Format as follows:
[
 {
    'observations': [],
    'actions': [],
    'rewards': [],
    'next_observations': [],
    'terminals': [],
    'env_infos': [],
    'agent_infos: [],
  },
  ...
]

Whereas oculus_capture_hardware.py produces:
[ # List of Demos
  [ # Demo entry
    { # Timestep
      'obs': []
      'action': []
      'reward: []
    },
    ..,
  ],
  ...
]
"""
import pickle
import click
import numpy as np
import matplotlib.pyplot as plt
DESC = 'USAGE:\n' '\tpython demo_2_awac.py -i <name> -o <name>\n'
@click.command(help=DESC)
@click.option(
    '--input_pickle', '-i', type=str, help='Input pickle.', required=False)
@click.option(
    '--output_pickle', '-o', type=str, help='Output pickle.', required=False)
def main(input_pickle, output_pickle):
    format_AWAC(input_pickle, output_pickle)

def och_2_awac(och_demo_list: list):
  """ Given a list of och demos produces a list of awac-formatted demos.

  Note: och_demo_list is the result of pickle(open(f)), where f was produced by
  oculus_capture_hardware.py.
  """
  awac_demo_list = []
  for d in och_demo_list:
      if len(d) <= 1:
          continue
      curr_demo = {'observations': [], 'actions': [],
                    'rewards': [], 'next_observations': [], 'terminals': []}
      for ts_dict in d:
          curr_demo['observations'].append([ts_dict['obs']])
          curr_demo['actions'].append([ts_dict['actions']])
          curr_demo['rewards'].append([ts_dict['reward']])
          curr_demo['terminals'].append([False])
      curr_demo['observations'] = np.concatenate(curr_demo['observations'], axis=0)
      curr_demo['actions'] = np.concatenate(curr_demo['actions'], axis=0)
      curr_demo['rewards'] = np.concatenate(curr_demo['rewards'], axis=0)
      curr_demo['terminals'] = np.concatenate(curr_demo['terminals'], axis=0)
      obs = curr_demo['observations']
      curr_demo['observations'] = obs[:-1].copy()
      curr_demo['next_observations'] = obs[1:].copy()
      curr_demo['actions'] = curr_demo['actions'][:-1].copy()
      curr_demo['rewards'] = curr_demo['rewards'][:-1].copy()[:, None]
      curr_demo['terminals'] = curr_demo['terminals'][:-1].copy()[:, None]
      curr_demo['terminals'][-1] = True
      curr_demo['agent_infos'] = np.array([{}]*len(curr_demo['terminals']))
      curr_demo['env_infos'] = np.array([{}]*len(curr_demo['terminals']))
      awac_demo_list.append(curr_demo)
  return awac_demo_list

def format_AWAC(input_pickle, output_pickle):
    demos = pickle.load(open(input_pickle, 'rb'))
    full_demo_list = och_2_awac(demos)
    pickle.dump(full_demo_list, open(output_pickle, 'wb'))
    lens = sum([len(a['observations']) for a in full_demo_list])
    (int(lens/1000)+1)*1000
    print(f"bc_num_pretrain_steps should be {(int(lens/1000)+1)*1500} steps")
    print(f"q_num_pretrain2_steps should be {(int(lens/1000)+1)*3000} steps")


if __name__ == '__main__':
    main()
